continue
 @user.update(public_key: public_key)
continue
public_key=  public_key.force_encoding("BINARY")
public_key
 private_key, public_key = generator.rsa
continue
recipient=User.find_by(id: @conversation.recipient_id)
continue
@resource
uploaded_file = Resource.find(file_id)
file_id = params[:id]
continue
k= Key.create(key: key, deliverable_id: tutorial.id)
k= Key.create(key: key, deliverable_id: tutorial.id, resource_id: nil)
k= Key.create(key: key, deliverable_id: tutorial.id)
continue
k.errors.full_messages
k.errors.any?
k= Key.create(key: key, deliverable_id: tutorial.id)
 Key.create(key: key, deliverable_id: tutorial.id)
tutorial.key= Key.create(key: key, deliverable_id: tutorial.id)
c
n
continue
tutorial.hashfile
t=Digest::SHA256.hexdigest(file_contents)
file_contents
tutorial.hashfile==Digest::SHA256.hexdigest(file_contents).error.any?
tutorial.hashfile==Digest::SHA256.hexdigest(file_contents)
if tutorial.hashfile==Digest::SHA256.hexdigest(file_contents)
tutorial.hashfile= Digest::SHA256.hexdigest(encrypted_data)
continue
@deliverable.errors
continue
deliverable_params
deliverable_param
deliverable_params
continue
decrypted_message = secure_message.unwrap(Base64.decode64(message.body))
secure_message =Themis::Smessage.new(private_key,recipient_public_key)
private_key
recipient_public_key
recipient
recipient_id
decrypted_message = secure_message.unwrap(Base64.decode64(message.body))
secure_message =Themis::Smessage.new(private_key,recipient_public_key)
secure_message =Themis::Smessage.new(private_key,recipient_public_key)%>
continue
create_user_registration
continue
 create_user_registration
 create_user_registration_path
 create_user_registration(@user)
 create_user_registration.errors.any?
continue
user_registration
userregistration
class
:user_type
user_type
continue
@user.user_type
@user
continue
user.user_type
@user.user_type
continue
@user.user_type
@user
create_user_registration
@user.save!
@user.errors.any?
continue
File.write(private_key_path, private_key)
private_key_path
continue
resource_params[:course_id]
continue
resource_params[:course_id]
resource_params
continue
resource_params
resource_params[:course_id]
@resource.update(title: resource_params[:title], description: resource_params[:description], hyperlink: resource_params[:hyperlink], type: resource_params[:type], course_id: resource_params[:course_id], encrypted_file: encrypted_data.force_encoding('UTF-8'), hashfile:Digest::SHA256.hexdigest(encrypted_data)).errors.any?
@resource.update(title: resource_params[:title], description: resource_params[:description], hyperlink: resource_params[:hyperlink], type: resource_params[:type], course_id: resource_params[:course_id], encrypted_file: encrypted_data.force_encoding('UTF-8'), hashfile:Digest::SHA256.hexdigest(encrypted_data))
continue
@resource.update
 @resource.hashfile=Digest::SHA256.hexdigest(encrypted_data)
continue
@resource.update
@resource.encrypted_file
@resource.update(resource_params)
@resource.hashfile=Digest::SHA256.hexdigest(encrypted_data)
continue
 @resource.hashfile=Digest::SHA256.hexdigest(encrypted_data)
@resource.encrypted_file
@resource.encrypted_file=encrypted_data.force_encoding('UTF-8')
@resource.encrypted_file=encrypted_data.force_encoding('UTF-8'
@resource.encrypted_file
continue
@resource.encrypted_file
continue
@resource.encrypted_file
continue
@resource.encrypted_file
@resource
continue
@resource.encrypted_file
@resource=Resource.find(params[:id])
 file_contents= File.read(resource_params[:encrypted_file])
abc=@resource.encrypted_file
@resource
continue
  @resource.encrypted_file=encrypted_data=encrypted_data
  @resource.encrypted_file=encrypted_data
n
abc=@resource.encrypted_file
continue
@resource
continue
@resource
continue
@resource.title
@resource.hashfile
@resource
continue
document
document.is_a?(Document).errors.any?
document.is_a?(Document)
resource
@resource
continue
@resource=Resource.create(ResourceFactory.new.create_activity(resource_params[:type],resource_params, arguments))
continue
@resource.create!
@resource.save!
@resource=Resource.create(ResourceFactory.new.create_activity(resource_params[:type],resource_params, arguments))
@resource=Resource.new(ResourceFactory.new.create_activity(resource_params[:type],resource_params, arguments))
@resource
n
continue
document
continue
klass
@resource
 @resource=ResourceFactory.new.create_activity(resource_params[:type],resource_params, arguments)
@resource
continue
r
 r = ResourceFactory.new.create_activity(resource_params[:type],resource_params, arguments)
r
@resource
document.encrypted_url
document.encrypted_file
encrypted_file
encrypted_data
n
continue
@resource
@resource = ResourceFactory.new.create_activity(resource_params[:resource_type], arguments)
n
continue
resource_params[:encrypted_file]
continue
resource_params[:encrypted_file].read
arguments
@resource.encrypted_file=encrypted_file
@resource.encrypted_file=encrypted_data
resource_params[:encrypted_file]
continue
document.encrypted_file
document.encrypted_file=encrypted_data
continue
@resource.encrypted_file
@resource.encrypted_file="abc"
@resource.encrypted_file.type
@resource.encrypted_file
@resource
@resource.
@resource.encrypted_file
continue
@resource.encrypted_file
@resource.encrypted_file=encrypted_data
encrypted_data
continue
@resource.encrypted_file
@resource
abc=@resource.encrypted_file
abc=@resource.encrypted
resource_params[:encrypted_file]
continue
@resource.encrypted_file
@resource
continue
@resource
continue
abc=@resource.hashfile
@resource
resource_params
resource_params[:hashfile]
continue
resource_params[:hashfile]
continue
@resource
resource_params[:hashfile]
continue
@resource.hashfile
@resource.hasfile
continue
 key.update_attribute(:key, new_key)
continue
    new_key.key.update_attribute(:key ,key)
    new_key.key.update_attribute(:key, key)
    new_key.key.update_attribute(:key key)
    new_key.key.update_attribute(key: key)
new_key.key==key
new_key
key
continue
@resource.hashfile
@resource.title
@resource
@resource.update(resource_params)
continue
@resource.update(resource_params)
@resource.update(@resource_params)
@resource.update(@resource = klass.find(params[:id])
@resource.update.errors.any?
@resource.update.errors.ant>
@resource.update
@resource
continue
@resource.errors
@resource.error
@resource = klass.find(params[:id])
@resource
continue
resource_params
continue
@resource.true?
@resource
@resource = ResourceFactory.new.create_activity(resource_params[:type],resource_params, arguments)
@resource = ResourceFactory.new.create_activity!(resource_params[:type],resource_params, arguments)
@resource = ResourceFactory.new.create_activity(resource_params[:type],resource_params, arguments)!
@resource = ResourceFactory.create!(resource_params[:type],resource_params, arguments)
@resource = ResourceFactory.create(resource_params[:type],resource_params, arguments)
@resource = ResourceFactory.new(resource_params[:type],resource_params, arguments)
@resource
@resource = ResourceFactory.new.create_activity(resource_params[:type],resource_params, arguments)
@resource = ResourceFactory.new.create_activity(resource_params[:type],resource_params, arguments
   15:     arguments[:course_id] = session[:course_id]
 if @resource
 @resource
continue
document
